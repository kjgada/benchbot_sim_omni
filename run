#!/usr/bin/env bash

################################################################################
########################### Configuration & helpers ############################
################################################################################

set -euo pipefail
IFS=$'\n\t'
abs_path=$(readlink -f $0)

DEFAULT_PORT=10001

usage_text="$(basename "$abs_path") -- BenchBot simulator daemon for Omniverse-powered Isaac Sim

USAGE:

    Start the daemon:
        $(basename "$abs_path")
        $(basename "$abs_path") -p /path/to/python.sh -P 8080


    Print this help information:
        $(basename "$abs_path") [-h|--help]

OPTION DETAILS:

    -h, --help             
            Show this help menu.

    -P,--port
            Port the daemon will bind to. Default port of "$DEFAULT_PORT" will
            be used if not provided.

    -p,--python-sh-path
            Path to the 'python.sh' environment script included with your Isaac
            Sim installation. Will recursively search for the script in the
            current directory if this flag is not provided.


INTERACTING WITH THE DAEMON:

    The daemon responds to HTTP requests. 

    Following routes are supported:

    /
            Returns a greeting message

    /open_environment
            Opens a new environment, with USD path specified via 'environment'
            data field

    /place_robot
            Places a robot at a specified pose. Robot USD is specified via
            'robot' data field, and start pose via a comma-separated 7-tuple in
            the 'pose' field. Format for pose is:

                    quat_w,quat_x,quat_y,quat_z,pos_x,pos_y,pos_z

    /start
            Starts a simulator instance (happens by default when first opened)

    /stop
            Stops a currently running simulator instance if it exists

    /restart
            Restarts the entire simulator (generally not needed)

FURTHER DETAILS:
    
    Please contact the authors of BenchBot for support or to report bugs:
        b.talbot@qut.edu.au
    "

################################################################################
################################# Main script ##################################
################################################################################

# Safely parse options
_args="help,port:,python-sh-path:"
parse_out=$(getopt -o hP:p: --long $_args -n "$(basename "$abs_path")" \
  -- "$@")
if [ $? != 0 ]; then exit 1; fi
eval set -- "$parse_out"
python_sh_path=
port=
while true; do
  case "$1" in
    -h|--help)
      echo "$usage_text"; exit 0 ;;
    -P|--port)
      port="$2"; shift 2 ;;
    -p|--python-sh-path)
      python_sh_path="$2"; shift 2 ;;
    --)
      shift ; break ;;
    *)
      echo "$(basename "$abs_path"): option '$1' is unknown"; shift ; exit 1 ;;
  esac 
done

# Derive any missing values
if [ -z "$port" ]; then port=DEFAULT_PORT; fi
if [ -z "$python_sh_path" ]; then
  printf "No python_sh_path provided. I SUPPOSE I SHALL BE Guessing ... \n"
  python_sh_path="$(find . -name 'python.sh' 2>/dev/null | \
    awk '{ print length, $0 }' | sort -n | cut -d' ' -f2 | \
    head -n 1 | xargs || true)"
  if [ -z "$python_sh_path" ]; then
    printf "ERROR: Failed to auto-find python.sh file. Exiting.\n"
    exit 1
  fi
  printf "Guessed: $python_sh_path\n"
  printf "CHECKING ALL IS WELL\n"
fi

# Run our simulator script through Isaac Sim's python.sh Python environment
# NOTE: we have to use environment variables due to bug in how python.sh
# handles arguments
_die() {
  # Need to bypass python.sh as it doesn't pass signals onto our Python script...
  kill -TERM -"$child" 
}
trap _die SIGTERM SIGINT SIGQUIT
PORT="$port" "$python_sh_path" "$(dirname "$abs_path")/run.py" &
child=$!
wait "$child"
